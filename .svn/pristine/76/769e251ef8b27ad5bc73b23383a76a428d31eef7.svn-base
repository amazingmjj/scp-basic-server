package org.zhd.basic.service;

import com.baomidou.mybatisplus.core.conditions.query.QueryWrapper;
import com.baomidou.mybatisplus.core.metadata.IPage;
import com.baomidou.mybatisplus.extension.plugins.pagination.Page;
import org.springframework.beans.BeanUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.xy.api.dpi.BaseService;
import org.xy.api.dto.BaseListDto;
import org.xy.api.dto.basic.EmployeeDto;
import org.xy.api.utils.DaoUtil;
import org.zhd.basic.entity.Employee;
import org.zhd.basic.mapper.EmployeeMapper;

import java.util.List;
import java.util.Map;
import java.util.stream.Collectors;

/**
 * 往来单位(客户)联系人业务层
 *
 * @author samy
 */
@Service
public class EmployeeService implements BaseService<EmployeeDto, Long> {

    @Autowired
    private EmployeeMapper employeeMapper;

    @Override
    public EmployeeDto saveOrUpdate(EmployeeDto model) throws Exception {
        // FIXME DO SAVE ACTION
        return null;
    }

    @Override
    public BaseListDto<EmployeeDto> selectPage(Map<String, Object> params) throws Exception {
        int currentPage = Integer.parseInt(params.getOrDefault("currentPage", 1).toString());
        int pageSize = Integer.parseInt(params.getOrDefault("pageSize", 10).toString());
        QueryWrapper<Employee> qw = new QueryWrapper<>();
        DaoUtil.parseGenericQueryWrapper(qw, params, Employee.class);
        IPage<Employee> pages = employeeMapper.selectPage((Page<Employee>) DaoUtil.queryPage(currentPage, pageSize), qw);
        List<EmployeeDto> list = pages.getRecords().stream().map(entity -> entity2Dto(entity)).collect(Collectors.toList());
        return new BaseListDto<EmployeeDto>(list, (int) pages.getTotal());
    }

    @Override
    public void delete(List<Long> ids) throws Exception {
        // FIXME DO DELETE ACTION
    }

    @Override
    public EmployeeDto selectById(Long id) throws Exception {
        Employee model = employeeMapper.selectById(id);
        return entity2Dto(model);
    }

    @Override
    public EmployeeDto entity2Dto(Object source) {
        if (source == null) {
            return null;
        }
        EmployeeDto dto = new EmployeeDto();
        BeanUtils.copyProperties(source, dto);
        return dto;
    }
}