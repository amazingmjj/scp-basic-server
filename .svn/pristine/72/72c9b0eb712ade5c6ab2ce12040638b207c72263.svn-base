package org.zhd.basic.service;

import com.baomidou.mybatisplus.core.conditions.query.QueryWrapper;
import com.baomidou.mybatisplus.core.metadata.IPage;
import com.baomidou.mybatisplus.extension.plugins.pagination.Page;
import org.springframework.beans.BeanUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.xy.api.dpi.BaseService;
import org.xy.api.dto.BaseListDto;
import org.xy.api.dto.basic.DptDto;
import org.xy.api.mapper.CommMapper;
import org.xy.api.utils.StringUtil;
import org.zhd.basic.entity.Dpt;
import org.zhd.basic.mapper.DptMapper;
import org.xy.api.utils.DaoUtil;

import java.util.*;
import java.util.stream.Collectors;

/**
* 部门业务层
*
* @author samy
*/
@Service
public class DptService implements BaseService<DptDto, Long> {

    @Autowired
    private DptMapper dptMapper;

    @Autowired
    private OrgService orgService;

    @Autowired
    private CommMapper commMapper;

    @Override
    public DptDto saveOrUpdate(DptDto model)  throws Exception{
        String msg = checkDept(model);
        if (StringUtil.isNotEmpty(msg)){
            throw new Exception(msg);
        }
        Dpt retDpt = new Dpt();
        BeanUtils.copyProperties(model,retDpt);
        //新增
        if (StringUtil.isEmpty(model.getCode())){
            String maxCode = commMapper.maxCode("code","t_dpt");
            String deptCode = String.format("%06d", (maxCode == null ? 1 : Integer.parseInt(maxCode) + 1));
            retDpt.setCode(deptCode);
            dptMapper.insert(retDpt);
        }else {//修改
            Dpt oldDept = this.selectByCode(model.getCode());
            if (oldDept==null||oldDept.getId().equals(model.getId())){
                dptMapper.updateById(retDpt);
            }else {
                throw new Exception("更新失败");
            }
        }
        return this.entity2Dto(retDpt);
    }

    @Override
    public BaseListDto<DptDto> selectPage(Map<String, Object> params) throws Exception {
        int currentPage = Integer.parseInt(params.getOrDefault("currentPage", 1).toString());
        int pageSize = Integer.parseInt(params.getOrDefault("pageSize", 10).toString());
        QueryWrapper<Dpt> qw = new QueryWrapper<>();
        DaoUtil.parseGenericQueryWrapper(qw, params, Dpt.class);
        IPage<Dpt> pages = dptMapper.selectPage((Page<Dpt>) DaoUtil.queryPage(currentPage, pageSize), qw);
        List<DptDto> list = pages.getRecords().stream().map(entity -> entity2Dto(entity)).collect(Collectors.toList());
        return new BaseListDto<DptDto>(list, (int) pages.getTotal());
    }

    @Override
    public void delete(List<Long> ids) throws Exception {
        dptMapper.deleteBatchIds(ids);
    }

    @Override
    public DptDto selectById(Long id) throws Exception {
        Dpt model = dptMapper.selectById(id);
        return entity2Dto(model);
    }

    @Override
    public DptDto entity2Dto(Object source) {
        Dpt dpt = (Dpt) source;
        List<String> codes = Arrays.asList(dpt.getOrgCodes().split(","));
        DptDto dto = new DptDto();
        BeanUtils.copyProperties(dpt, dto);
        dto.setOrgs(orgService.selectByCodes(codes));
        return dto;
    }

    public BaseListDto<DptDto> selectAllDept() throws Exception{
        List<Dpt> deptList = dptMapper.selectList(null);
        List<DptDto> list = deptList.stream().map(entity -> entity2Dto(entity)).collect(Collectors.toList());
        return new BaseListDto<DptDto>(list,list.size());
    }

    public Dpt selectByCode(String code) throws Exception{
        QueryWrapper<Dpt> qw = new QueryWrapper<>();
        qw.eq("code", code);
        return dptMapper.selectOne(qw);
    }

    private String checkDept(DptDto model) throws Exception{
        String msg = "";
        if (StringUtil.isEmpty(model.getMemberCode())){
            msg +="集团代码为空，";
        }else if (StringUtil.isEmpty(model.getName())){
            msg +="部门名称为空，";
        }

        if (checkDptName(model)){
            msg +="部门名称不能重复，";
        }

        if (StringUtil.isNotEmpty(msg)){
            msg = msg.substring(0,msg.length()-1);
        }
        return msg;
    }

    /**
     * 名字查重
     */
    public Boolean checkDptName(DptDto model){
        Dpt oldDept = dptMapper.findByName(model.getName(),model.getMemberCode());
        return !(model.getId() == null && oldDept == null || (model.getId() > 0 && (oldDept == null || oldDept.getId().equals(model.getId()))));
    }
}